name: Monitor IPA Repository Releases

on:
  schedule:
    - cron: '* * * * *'  # Run every minute
  workflow_dispatch:  # Keep manual trigger for testing

jobs:
  check-ipa-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Check for new IPA releases
        id: check_releases
        run: |
          # Function to sanitize output
          sanitize_output() {
            echo "$1" | tr -d '\r' | tr -d '\n'
          }

          # Get the latest release
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/QwIT-Development/app-legacy/releases/latest")
          
          # Check if there are any releases
          if [ "$(echo $LATEST_RELEASE | jq -r 'if type=="object" then "yes" else "no" end')" != "yes" ]; then
            echo "No releases found in repository"
            echo "is_new=$(sanitize_output false)" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract release information
          TAG_NAME=$(echo $LATEST_RELEASE | jq -r .tag_name)
          PUBLISHED_AT=$(echo $LATEST_RELEASE | jq -r .published_at)
          # Get description and escape it properly for JSON
          BODY=$(echo $LATEST_RELEASE | jq -r .body | jq -Rs)
          
          # Find IPA asset
          IPA_ASSET=$(echo $LATEST_RELEASE | jq -r '.assets[]? | select(.name | endswith(".ipa"))')
          
          if [ -n "$IPA_ASSET" ]; then
            # Extract IPA information
            DOWNLOAD_URL=$(echo $IPA_ASSET | jq -r .browser_download_url)
            SIZE=$(echo $IPA_ASSET | jq -r .size)
            
            # Convert size to MB and round to 2 decimal places
            SIZE_MB=$(echo "scale=2; $SIZE/1048576" | bc)
            
            # Format date for version date
            VERSION_DATE=$(date -d "$PUBLISHED_AT" +"%Y-%m-%dT%H:%M:%S%z")
            
            # Check if this is a new version
            if [ ! -f .last_processed_ipa ]; then
              echo $TAG_NAME > .last_processed_ipa
              echo "tag=$(sanitize_output $TAG_NAME)" >> $GITHUB_OUTPUT
              echo "published=$(sanitize_output $VERSION_DATE)" >> $GITHUB_OUTPUT
              echo "download_url=$(sanitize_output $DOWNLOAD_URL)" >> $GITHUB_OUTPUT
              echo "size=$(sanitize_output $SIZE_MB)" >> $GITHUB_OUTPUT
              echo "description=$BODY" >> $GITHUB_OUTPUT
              echo "is_new=$(sanitize_output true)" >> $GITHUB_OUTPUT
            else
              LAST_PROCESSED=$(cat .last_processed_ipa)
              if [ "$TAG_NAME" != "$LAST_PROCESSED" ]; then
                echo "New IPA release detected!"
                echo $TAG_NAME > .last_processed_ipa
                echo "tag=$(sanitize_output $TAG_NAME)" >> $GITHUB_OUTPUT
                echo "published=$(sanitize_output $VERSION_DATE)" >> $GITHUB_OUTPUT
                echo "download_url=$(sanitize_output $DOWNLOAD_URL)" >> $GITHUB_OUTPUT
                echo "size=$(sanitize_output $SIZE_MB)" >> $GITHUB_OUTPUT
                echo "description=$BODY" >> $GITHUB_OUTPUT
                echo "is_new=$(sanitize_output true)" >> $GITHUB_OUTPUT
              else
                echo "No new IPA release"
                echo "is_new=$(sanitize_output false)" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "No IPA asset found in release"
            echo "is_new=$(sanitize_output false)" >> $GITHUB_OUTPUT
          fi

      - name: Update apps.json
        if: steps.check_releases.outputs.is_new == 'true'
        run: |
          # Read existing JSON file
          if [ ! -f apps.json ]; then
            # Create initial JSON structure if file doesn't exist
            echo '{
              "name": "Firka",
              "identifier": "app.firka.legacy",
              "sourceURL": "https://git.spitkov.hu/spitkov/firkaipa",
              "apps": []
            }' > apps.json
          fi
          
          # Create new app entry using jq to ensure proper JSON formatting
          jq -n --arg tag "${{ steps.check_releases.outputs.tag }}" \
             --arg date "${{ steps.check_releases.outputs.published }}" \
             --arg desc "${{ steps.check_releases.outputs.description }}" \
             --arg url "${{ steps.check_releases.outputs.download_url }}" \
             --arg size "${{ steps.check_releases.outputs.size }}" \
             '{
               "name": "Firka",
               "bundleIdentifier": "app.firka.legacy",
               "developerName": "QwIT-Development",
               "version": $tag,
               "versionDate": $date,
               "versionDescription": $desc,
               "downloadURL": $url,
               "localizedDescription": "Firka App",
               "iconURL": "https://github.com/QwIT-Development/app-legacy/blob/master/refilc/assets/icons/ic_android.png?raw=true",
               "tintColor": "018084",
               "isLanZouCloud": 0,
               "size": ($size | tonumber),
               "type": 1
             }' > new_app.json
          
          # Add new app to the beginning of the apps array
          jq -s '.[0].apps = ([.[1]] + .[0].apps) | .[0]' apps.json new_app.json > apps.json.tmp
          mv apps.json.tmp apps.json
          rm new_app.json

      - name: Commit and push if changed
        if: steps.check_releases.outputs.is_new == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add apps.json
          git commit -m "Update apps.json with new IPA release ${{ steps.check_releases.outputs.tag }}" || exit 0
          git push 